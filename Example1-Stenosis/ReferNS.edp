for(int sample = 0; sample<100; sample++){
    cout<<"Sample:"+sample<<endl;

    /////// Import weights for each CP
    real[int] weights(726);
    ifstream wfile("data/mapping/sample_"+sample+"/weights.txt");
    for (int iii = 0; iii < 726; iii++){
        wfile >> weights[iii];
    }

    /////// Import CPs 
    real[int] cps(720);
    ifstream cpfile("data/mapping/control.txt");
    for (int iii = 0; iii < 720; iii++){
        cpfile >> cps[iii];
    }


    //////// Define a transformation function T
    func real[int] funcT (real[int] Weight,real[int] CP,int Num){
        real[int] xdis(Num),ydis(Num),dis(Num),kernel(Num),pred(2);
        real xpre,ypre;
        for(int numcp = 0; numcp<Num; numcp++){
            xdis[numcp] = x - CP[numcp];
            ydis[numcp] = y - CP[numcp+Num];

            dis[numcp] = sqrt(xdis[numcp]^2 + ydis[numcp]^2);
            // kernel[numcp] = dis[numcp]^2 * log(dis[numcp]);
            kernel[numcp] = dis[numcp]^3;
        }
        real shiftx=10;
        real shifty=1;
        real scalex=10;
        real scaley=1;
        real ScaledX = (x-shiftx)/scalex;
        real ScaledY = (y-shifty)/scaley;

        xpre=0;
        ypre=0;
        for(int numcp = 0; numcp<Num; numcp++){
            xpre = xpre + kernel[numcp]*Weight[numcp];
            ypre = ypre + kernel[numcp]*Weight[numcp+(Num+3)];
        }
        pred[0] = xpre+Weight[Num]+ScaledX*Weight[Num+1]+ScaledY*Weight[Num+2];
        pred[1] = ypre+Weight[2*Num+3]+ScaledX*Weight[2*Num+4]+ScaledY*Weight[2*Num+5];
        return pred;
    }



    //////// Define Macro
    macro F11(u1, u2) (dx(u1)) //
    macro F12(u1, u2) (dy(u1)) //
    macro F21(u1, u2) (dx(u2)) //
    macro F22(u1, u2) (dy(u2)) //

    //  Macro for the determinant of the deformation gradient
    macro JF(u1, u2) (
    F11(u1, u2)*F22(u1, u2) - F12(u1, u2)*F21(u1, u2)
    ) //

    //  Macros for the inverse of the deformation gradient
    macro Finv11 (u1, u2) (
    F22(u1, u2) / JF(u1, u2)
    ) //
    macro Finv22 (u1, u2) (
    F11(u1, u2) / JF(u1, u2)
    ) //
    macro Finv12 (u1, u2) (
    -F12(u1, u2) / JF(u1, u2)
    ) //
    macro Finv21 (u1, u2) (
    -F21(u1, u2) / JF(u1, u2)
    ) //





    mesh Mesh = readmesh("data/reference/reference.msh");

    int[int] orderOut = [1, 1, 1, 1];

    real umax = 2.51327412286999996*1e3 / (4 * pi); //mm/s

    // real uin = -umax*(y-1)^2+umax;
    real niu = 3.5*1e-3; // g mm^-1 s^-1
    real rho = 1.06*1e-3; // g mm^-3
    real nu = niu / rho;
    
    
    cout << "Number of Elements: " + Mesh.nt << endl;

    func PkVector = [P2, P2, P1];

    fespace SpaceVector(Mesh, PkVector);
    fespace Uh(Mesh,P2);


    SpaceVector [ucx, ucy, pc];
    SpaceVector [ux, uy, p];
    SpaceVector [vx, vy, q];
    Uh FX = funcT(weights,cps,int(cps.n/2))[0];
    Uh FY = funcT(weights,cps,int(cps.n/2))[1];

    cout << "Finite Element DOF (in each partition): " + SpaceVector.ndof << endl;

    problem vRes([ux, uy, p], [vx, vy, q]) = int2d(Mesh)(

        + JF(FX,FY)*nu*((dx(ucx)*Finv11(FX,FY)+dy(ucx)*Finv21(FX,FY))*(dx(vx)*Finv11(FX,FY)+dy(vx)*Finv21(FX,FY))
                        +(dx(ucx)*Finv12(FX,FY)+dy(ucx)*Finv22(FX,FY))*(dx(vx)*Finv12(FX,FY)+dy(vx)*Finv22(FX,FY)) 
                        +(dx(ucy)*Finv11(FX,FY)+dy(ucy)*Finv21(FX,FY))*(dx(vy)*Finv11(FX,FY)+dy(vy)*Finv21(FX,FY))
                        +(dx(ucy)*Finv12(FX,FY)+dy(ucy)*Finv22(FX,FY))*(dx(vy)*Finv12(FX,FY)+dy(vy)*Finv22(FX,FY)))

        + JF(FX,FY)*vx*(ucx*(dx(ucx)*Finv11(FX,FY)+dy(ucx)*Finv21(FX,FY))+ucy*(dx(ucx)*Finv12(FX,FY)+dy(ucx)*Finv22(FX,FY))) 
        + JF(FX,FY)*vy*(ucx*(dx(ucy)*Finv11(FX,FY)+dy(ucy)*Finv21(FX,FY))+ucy*(dx(ucy)*Finv12(FX,FY)+dy(ucy)*Finv22(FX,FY)))

        - JF(FX,FY)/rho*pc*((dx(vx)*Finv11(FX,FY)+dy(vx)*Finv21(FX,FY))+(dx(vy)*Finv12(FX,FY)+dy(vy)*Finv22(FX,FY))) 
        - JF(FX,FY)*q*((dx(ucx)*Finv11(FX,FY)+dy(ucx)*Finv21(FX,FY))+(dx(ucy)*Finv12(FX,FY)+dy(ucy)*Finv22(FX,FY))))

        +on(1,3,ux = 0, uy = 0)
        +on(4, ux = -umax*(y-1)^2+umax, uy = 0);

    problem vJ([ux, uy, p], [vx, vy, q]) = int2d(Mesh)(

        + JF(FX,FY)*vx*(ucx*(dx(ux)*Finv11(FX,FY)+dy(ux)*Finv21(FX,FY))
                            +ux*(dx(ucx)*Finv11(FX,FY)+dy(ucx)*Finv21(FX,FY))
                            +ucy*(dx(ux)*Finv12(FX,FY)+dy(ux)*Finv22(FX,FY))
                            +uy*(dx(ucx)*Finv12(FX,FY)+dy(ucx)*Finv22(FX,FY))) 
        + JF(FX,FY)*vy*(ucx*(dx(uy)*Finv11(FX,FY)+dy(uy)*Finv21(FX,FY))
                            +ux*(dx(ucy)*Finv11(FX,FY)+dy(ucy)*Finv21(FX,FY))
                            +ucy*(dx(uy)*Finv12(FX,FY)+dy(uy)*Finv22(FX,FY))
                            +uy*(dx(ucy)*Finv12(FX,FY)+dy(ucy)*Finv22(FX,FY)))

        + JF(FX,FY)*nu*((dx(ux)*Finv11(FX,FY)+dy(ux)*Finv21(FX,FY))*(dx(vx)*Finv11(FX,FY)+dy(vx)*Finv21(FX,FY))
                        +(dx(ux)*Finv12(FX,FY)+dy(ux)*Finv22(FX,FY))*(dx(vx)*Finv12(FX,FY)+dy(vx)*Finv22(FX,FY))
                        +(dx(uy)*Finv11(FX,FY)+dy(uy)*Finv21(FX,FY))*(dx(vy)*Finv11(FX,FY)+dy(vy)*Finv21(FX,FY))
                        +(dx(uy)*Finv12(FX,FY)+dy(uy)*Finv22(FX,FY))*(dx(vy)*Finv12(FX,FY)+dy(vy)*Finv22(FX,FY)))

        - JF(FX,FY)/rho*p*((dx(vx)*Finv11(FX,FY)+dy(vx)*Finv21(FX,FY))+(dx(vy)*Finv12(FX,FY)+dy(vy)*Finv22(FX,FY))) 
        - JF(FX,FY)*q*((dx(ux)*Finv11(FX,FY)+dy(ux)*Finv21(FX,FY))+(dx(uy)*Finv12(FX,FY)+dy(uy)*Finv22(FX,FY))))
        

        + on(1,3, ux = 0, uy = 0)
        + on(4, ux = -umax*(y-1)^2+umax , uy = 0);


    real arrns = 1e-9;
    
    macro ns() {
        int n;
        real err=0;
        vRes;

        for(n=0; n< 15; n++) {
            vJ;

            ucx[] -= ux[];
            ucy[] -= uy[];
            pc[] -= p[];
            real Lu1=ucx[].linfty, Lu2=ucy[].linfty, Lp=pc[].linfty;
            err = ux[].linfty/Lu1 + uy[].linfty/Lu2 + p[].linfty/Lp;
            cout << n << " err = " << err << " " << arrns << " rey = " << 1./nu << endl;
            if(err < arrns) break; 
            }
    } //EOF
    ns;
    // plot(pc, ps="pressure.ps", value=1, fill=1);
    // plot([ucx, ucy], ps="velocity.ps", value=1, coef=.05);
    ofstream uxfile("data/snapshots/sample_"+sample+"/u.txt");
    uxfile << ux[] << endl;
    ofstream uyfile("data/snapshots/sample_"+sample+"/v.txt");
    uyfile << uy[] << endl;
    ofstream pfile("data/snapshots/sample_"+sample+"/p.txt");
    pfile << p[] << endl;



}